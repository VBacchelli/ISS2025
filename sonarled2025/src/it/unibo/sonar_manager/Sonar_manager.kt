/* Generated by AN DISI Unibo */ 
package it.unibo.sonar_manager

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.*

class Sonar_manager ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("$name - STARTED")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						CommUtils.outblack("waiting ...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="turnSonarOn",cond=whenDispatch("sonarstart"))
					transition(edgeName="t01",targetState="turnSonarOff",cond=whenDispatch("sonarstop"))
				}	 
				state("turnSonarOn") { //this:State
					action { //it:State
						CommUtils.outblack("turning sonar on")
						 Runtime.getRuntime().exec("python mqttReceiver.py") 
						 Runtime.getRuntime().exec("python SonarMqtt.py")  
						 sonarOn = true 	 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("turnSonarOff") { //this:State
					action { //it:State
						CommUtils.outblack("turning sonar off")
						 Runtime.getRuntime().exec("pkill -f SonarMqtt.py")  
						 Runtime.getRuntime().exec("pkill -f mqttReceiver.py")  
						 sonarOn=false  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("handleDistance") { //this:State
					action { //it:State
						emitLocalStreamEvent("distancestream", "distancestream(D)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
